/*******************************************************************************
 * This files was developed for CS4233: Object-Oriented Analysis & Design.
 * The course was taken at Worcester Polytechnic Institute.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Copyright Â©2016 Gary F. Pollice
 *******************************************************************************/

package tollbooth;

import tollbooth.gatecontroller.GateController;

/**
 * The TollGate contains everything about a tollgate in a tollbooth.
 * @version Feb 3, 2016
 */
public class TollGate
{
	private final GateController controller;
	private final SimpleLogger logger;
	private Integer numOpens;
	private Integer numCloses;
	private final int numberRetry; 
	private boolean willNotRespondMode;
	
	/**
	 * Constructor that takes the actual gate controller and the logger.
	 * @param controller the GateController object.
	 * @param logger the SimpleLogger object.
	 */
	public TollGate(GateController controller, SimpleLogger logger) {
		this.controller = controller;
		this.logger = logger;
		numCloses = new Integer(0);
		numOpens = new Integer(0);
		numberRetry = 3;
		willNotRespondMode = false;
		
		
	}
	
	/**
	 * Open the gate.
	 * @throws TollboothException
	 */
	public void open() throws TollboothException
	{
		
		int numTry = 0;
		
		for (;(numTry < numberRetry);numTry++){
			try{

				if(willNotRespondMode){
					// If the system is in do not respond mode
					logger.accept(new LogMessage("open: will not respond"));
					break;
				}
				
				if(controller.isOpen()){
					// If the System is open already
					break;
				}
				
				// If the system is (or was) responding and is not open.
				controller.open();// Throws TollboothException
				numOpens++;
				if (numTry > 0){
					logger.accept(new LogMessage("open: successful"));
				}
				break;
				
			}catch (TollboothException e){
				if (numTry == 2){
					// On the Third Try 
					
					logger.accept(new LogMessage("open: unrecoverable malfunction "+e.getMessage(), e));
					willNotRespondMode = true;
					throw new TollboothException("open: unrecoverable malfunction "+e.getMessage(), e);
				}else{
					logger.accept(new LogMessage("open: malfunction "+e.getMessage(), e ));
				}
				
			}
		}
		
	}
	
	/**
	 * Close the gate
	 * @throws TollboothException
	 */
	public void close() throws TollboothException
	{
		int numTry = 0;
		
		for (;(numTry < numberRetry);numTry++){
			try{
				
				if (willNotRespondMode){
					// If it's in will not Respond mode
					logger.accept(new LogMessage("close: will not respond"));
					break;
				}
				
				if (!controller.isOpen()){
					// If it's already closed
					break;
				}
				
				// If it's open and is (or was) responding
				controller.close();
				numCloses++;
				if (numTry > 0){
					logger.accept(new LogMessage("close: successful"));
				}
				break;
				
			}catch (TollboothException e){
				if (numTry == 2){
					String errorMessage = e.getMessage();
					// On the Third try
					logger.accept(new LogMessage("close: unrecoverable malfunction "+errorMessage, e));
					willNotRespondMode = true;
					throw new TollboothException("close: unrecoverable malfunction "+errorMessage, e);
					
				}else{
					logger.accept(new LogMessage("close: malfunction "+e.getMessage(), e));
					
				}
				
			}
		}
	}
	
	/**
	 * Reset the gate to the state it was in when created with the exception of the
	 * statistics.
	 * @throws TollboothException
	 */
	public void reset() throws TollboothException
	{
		int numTry = 0;
		for(;(numTry < numberRetry); numTry++){
			try{
				if(willNotRespondMode){
					logger.accept(new LogMessage("reset: will not respond"));
					break;
				}
				
				if (controller.isOpen()){
					controller.reset();
				}
				controller.reset();
				logger.accept(new LogMessage("reset: successful"));
				break;
				
			}catch(TollboothException e){
				if (numTry == 2){
					// On the Third try
					String errorMessage = e.getMessage();
					
					logger.accept(new LogMessage("reset: unrecoverable malfunction "+errorMessage, e));
					willNotRespondMode = true;
					throw new TollboothException("reset: unrecoverable malfunction "+errorMessage, e);
					
				}else{
					logger.accept(new LogMessage("reset: malfunction "+e.getMessage(), e));
					
				}
				
			}
			
		}
	}
	
	/**
	 * @return true if the gate is open
	 * @throws TollboothException 
	 */
	public boolean isOpen() throws TollboothException
	{
		return controller.isOpen();
	}
	
	/**
	 * @return the number of times that the gate has been opened (that is, the
	 *  open method has successfully been executed) since the object was created.
	 */
	public int getNumberOfOpens()
	{
		return numOpens;
	}
	
	/**
	 * @return the number of times that the gate has been closed (that is, the
	 *  close method has successfully been executed) since the object was created.
	 */
	public int getNumberOfCloses()
	{
		// To be completed
		return numCloses;
	}
}
