/*******************************************************************************
 * This files was developed for CS4233: Object-Oriented Analysis & Design.
 * The course was taken at Worcester Polytechnic Institute.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Copyright Â©2016 Gary F. Pollice
 *******************************************************************************/

package tollbooth;

import tollbooth.gatecontroller.GateController;

/**
 * The TollGate contains everything about a tollgate in a tollbooth.
 * @version Feb 3, 2016
 */
public class TollGate
{
	private final GateController controller;
	private final SimpleLogger logger;
	private Integer numOpens;
	private Integer numCloses;
	private int numberRetry; 
	private boolean willNotRespondMode;
	
	/**
	 * Constructor that takes the actual gate controller and the logger.
	 * @param controller the GateController object.
	 * @param logger the SimpleLogger object.
	 */
	public TollGate(GateController controller, SimpleLogger logger) {
		this.controller = controller;
		this.logger = logger;
		this.numCloses = new Integer(0);
		this.numOpens = new Integer(0);
		this.numberRetry = 3;
		this.willNotRespondMode = false;
		
		
	}
	
	/**
	 * Open the gate.
	 * @throws TollboothException
	 */
	public void open() throws TollboothException
	{
		
		int numTry = 0;
		
		if (this.controller.isOpen()){
			return;
		}
		if (this.willNotRespondMode){
			this.logger.accept(new LogMessage("open: will not respond"));
			return; 
		}
		for (;(numTry < this.numberRetry);numTry++){
			try{
				this.controller.open();
				this.numOpens++;
				if (numTry > 0){
					this.logger.accept(new LogMessage("open: successful"));
				}
				break;
				
			}catch (TollboothException e){
				if (numTry==2){
					this.logger.accept(new LogMessage("open: unrecoverable malfunction",e));
					this.willNotRespondMode = true;
				}else{
					this.logger.accept(new LogMessage("open: malfunction",e));
				}
				
			}
		}
		
	}
	
	/**
	 * Close the gate
	 * @throws TollboothException
	 */
	public void close() throws TollboothException
	{
		if (controller.isOpen()){
			controller.close();
			this.numCloses++;
		}
	}
	
	/**
	 * Reset the gate to the state it was in when created with the exception of the
	 * statistics.
	 * @throws TollboothException
	 */
	public void reset() throws TollboothException
	{
		if (controller.isOpen()){
			controller.close();
		}
	}
	
	/**
	 * @return true if the gate is open
	 * @throws TollboothException 
	 */
	public boolean isOpen() throws TollboothException
	{
		return controller.isOpen();
	}
	
	/**
	 * @return the number of times that the gate has been opened (that is, the
	 *  open method has successfully been executed) since the object was created.
	 */
	public int getNumberOfOpens()
	{
		return this.numOpens;
	}
	
	/**
	 * @return the number of times that the gate has been closed (that is, the
	 *  close method has successfully been executed) since the object was created.
	 */
	public int getNumberOfCloses()
	{
		// To be completed
		return this.numCloses;
	}
}
