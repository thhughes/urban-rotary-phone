/*******************************************************************************
 * This files was developed for CS4233: Object-Oriented Analysis & Design.
 * The course was taken at Worcester Polytechnic Institute.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Copyright Â©2016 Gary F. Pollice
 *******************************************************************************/

package tollbooth;

import static org.junit.Assert.*;

import java.io.IOException;

import org.junit.Test;
import tollbooth.gatecontroller.*;

/**
 * Test cases for the Tollbooth, TollGate class.
 * @version Feb 3, 2016
 */
public class TollboothTest
{
	private static final String TollboothTestLogPath = "/logs/TollboothLoggerOutput/";
	
	@Test
	public void createNewTollGateWithNoController()
	{
		assertNotNull(new TollGate(null, null));
	}
	
	@Test
	public void createNewTollGateWithAController()
	{
		assertNotNull(new TollGate(new TestGateController(), null));
	}
	
	@Test
	public void newGateControllerIsClosed() throws TollboothException
	{
		final GateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		assertFalse(controller.isOpen());
	}

	@Test
	public void gateControllerIsOpenAfterOpenMessage() throws TollboothException
	{
		final GateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		gate.open();
		assertTrue(gate.isOpen());
	}
	
	@Test
	public void gateControllerOpensAndIncrementsStatsWhenGateIsClosed() throws TollboothException
	{
		final GateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		gate.open();
		assertEquals(1,gate.getNumberOfOpens());
	}
	
	@Test
	public void gateControllerOpensAndDoesNotIncrementsStatsWhenGateIsOpen() throws TollboothException
	{
		final GateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		gate.open();
		gate.open();
		assertEquals(1,gate.getNumberOfOpens());
	}
	
	@Test
	public void gateControllerNumberClosesDefaultCorrect() throws TollboothException
	{
		final GateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		assertEquals(0, gate.getNumberOfCloses());
	}
	
	@Test
	public void gateControllerClosesWhenReceivesCloseMessage() throws TollboothException
	{
		final GateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		gate.open();
		gate.close();
		assertFalse(gate.isOpen());
	}
	
	@Test
	public void gateControllerNumberOpensDefaultCorrect() throws TollboothException
	{
		final GateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		assertEquals(0, gate.getNumberOfOpens());
	}
	
	@Test
	public void gateControllerDoesntChangeStatsOnCloseWhenClosed() throws TollboothException
	{
		final GateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		gate.close();
		assertEquals(0, gate.getNumberOfCloses());
	}
	
	@Test
	public void gateControllerCorrectlyIncrementsCloseCountWhenReceivesCloseAndIsOpen() throws TollboothException
	{
		final GateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		gate.open();
		gate.close();
		assertEquals(1,gate.getNumberOfCloses());
	}
	
	@Test
	public void gatControllerCorrectlyClosesGateWhenResetIsUsedWhileOpen() throws TollboothException
	{
		final GateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		gate.open();
		gate.reset();
		
		assertFalse(gate.isOpen());
	}
	
	@Test
	public void gatControllerCorrectlyClosesGateWhenResetIsUsedWhileClosed() throws TollboothException
	{
		final GateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		gate.reset();
		assertFalse(gate.isOpen());	
	}
	
	
	@Test
	public void gateControllerCorrectlyLeavesStatsAloneWhenResetIsUsedWhileOpen() throws TollboothException
	{
		final GateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		gate.open();
		int numCloses = gate.getNumberOfCloses();
		gate.reset();
		assertEquals(numCloses, gate.getNumberOfCloses());
	}
	
	@Test
	public void gateControllerOpensOnSingleFailureForOpen() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		controller.failNTimes(1,false);
		gate.open();
		assertTrue(gate.isOpen());
		
	}
	
	@Test
	public void gateControllerOnlyIncrementsStatsByOneOnFailureToOpenWhileClosed() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		controller.failNTimes(1,false);
		gate.open();
		assertEquals(1, gate.getNumberOfOpens());
		
	}
	
	
	@Test
	public void gateControllerCreatesCorrectMessagesOnSingleFailureToOpenWhileClosed() throws TollboothException
	{

		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		controller.failNTimes(1,false);
		gate.open();
		
		LogMessage message = logger.getNextMessage();
		assertEquals("open: malfunction Open: Failed", message.getMessage());
		message = logger.getNextMessage();
		assertEquals("open: successful", message.getMessage());
	}
	
	@Test
	public void gateControllerLoggsAnErrorWhenOpenFailsFirstTimeOnSingleFailureWhileClosed() throws TollboothException
	{

		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		controller.failNTimes(1,false);
		gate.open();
		
		LogMessage message = logger.getNextMessage();
		assertTrue(message.hasCause());
	}
	
	@Test
	public void gateControllerLoggsCorrectErrorWhenOpenFailsFirstTimeOnSingleFailureWhileClosed() throws TollboothException
	{

		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		controller.failNTimes(1,false);
		gate.open();
		
		LogMessage message = logger.getNextMessage();
		assertNotNull(message.getCause());
	}


	
	@Test
	public void gateControllerOpensGateWhileClosedWhenGateFailsTwoTimes() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		controller.failNTimes(2,false);
		gate.open();
		assertTrue(gate.isOpen());
	}
	
	@Test
	public void gateControllerDoesNotOpenGateWhileClosedWhenGateFailsThreeTimes() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		controller.failNTimes(3,false);
		try{
			gate.open();
		}catch(TollboothException e){
			
		}
		assertFalse(gate.isOpen());
	}
	
	@Test
	public void gateControllerCorrectlyLogsWhileOpensGateWhileClosedWhenGateFailsThreeTimes() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		controller.failNTimes(3,true);
		try{
			gate.open();
		}catch(TollboothException e){
			
		}
		
		assertFalse(controller.testIsOpen());
		LogMessage message = logger.getNextMessage();
		assertEquals("open: malfunction System Unresponsive", message.getMessage());
		message = logger.getNextMessage();
		assertEquals("open: malfunction System Unresponsive", message.getMessage());
		message = logger.getNextMessage();
		assertEquals("open: unrecoverable malfunction System Unresponsive", message.getMessage());
		assertNotNull(message.getCause());
	}
	
	@Test
	public void gateControllerCorrectlyThrowsErrorWhileOpensGateWhileClosedWhenGateFailsThreeTimes() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		controller.failNTimes(3,true);
		try{
			gate.open();
			assertTrue(false);					// This will always fail, an error should be thrown here. 
		}catch(TollboothException e){
			assertNotNull(e);
		}

		
	}
	
	@Test
	public void gateControllerFailsToOpenGateWhileClosedWhenGateFailsThreeTimesGateBecomesUnresponsive() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		controller.failNTimes(3,true);
		try{
			gate.open();
		}catch(TollboothException e){
			
		}
		assertFalse(controller.testIsOpen());
	}
	
	@Test
	public void gateControllerDoesntModifyStatsIfInWillNotRespondMode() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		controller.failNTimes(3,true);
		try{
			gate.open();
		}catch(TollboothException e){
			
		}
		gate.open();
		
		assertEquals(0, gate.getNumberOfOpens());
		
	}
	
	@Test
	public void gateControllerLogsCorrectlyIfInWillNotRespondMode() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		controller.failNTimes(3,true);
		try{
			gate.open();
		}catch(TollboothException e){
			
		}
		gate.open();
		
		LogMessage message = logger.getNextMessage();
		assertEquals("open: malfunction System Unresponsive", message.getMessage());
		message = logger.getNextMessage();
		assertEquals("open: malfunction System Unresponsive", message.getMessage());
		message = logger.getNextMessage();
		assertEquals("open: malfunction System Unresponsive", message.getMessage());
		message = logger.getNextMessage();
		assertEquals("open: unrecoverable malfunction System Unresponsive", message.getMessage());
		message = logger.getNextMessage();
		assertEquals("open: will not respond", message.getMessage());
	}
	
	@Test
	public void gateControllerSuccedsToCloseGateWhileOpenAfterOneFailure() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		try{
			gate.open();
		}catch (TollboothException e){
			assertTrue(false);			// Should never get here. 
		}
		controller.failNTimes(1,false);
		try{
			gate.close();
		}catch(TollboothException e){
			assertFalse(true); 			// Should never get here
		}
		assertFalse(gate.isOpen());
	}
	
	@Test
	public void gateControllerSuccedsToUpdateStatsGateWhileOpenAfterOneFailure() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		try{
			gate.open();
		}catch (TollboothException e){
			assertTrue(false);			// Should never get here. 
		}
		controller.failNTimes(1,false);
		try{
			gate.close();
		}catch(TollboothException e){
			assertFalse(true); 			// Should never get here
		}
		assertEquals(1, gate.getNumberOfCloses());
	}
	
	@Test
	public void gateControllerLogsSingleFailureCorrectly() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		try{
			gate.open();
		}catch (TollboothException e){
			assertTrue(false);			// Should never get here. 
		}
		controller.failNTimes(1,false);
		try{
			gate.close();
		}catch(TollboothException e){
			assertFalse(true); 			// Should never get here
		}
		
		LogMessage message = logger.getNextMessage();
		assertEquals("close: malfunction Close: Failed", message.getMessage());
		assertNotNull(message.getCause());
		message = logger.getNextMessage();
		assertEquals("close: successful", message.getMessage());
	}
	
	@Test
	public void gateControllerFailsToCloseGateAfter3Failures() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		try{
			gate.open();
		}catch (TollboothException e){
			assertTrue(false);			// Should never get here. 
		}
		controller.failNTimes(3,true);
		try{
			gate.close();
		}catch(TollboothException e){
			assertTrue(controller.testIsOpen());
		}
	}
	
	@Test
	public void gateControllerStatsAreCorrectAfterItFailsToCloseGateAfter3Failures() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		try{
			gate.open();
		}catch (TollboothException e){
			assertTrue(false);			// Should never get here. 
		}
		controller.failNTimes(3,true);
		try{
			gate.close();
		}catch(TollboothException e){

		}
		
		assertEquals(0,gate.getNumberOfCloses());
	}
	
	@Test
	public void gateControllerThrowsExceptionWhenItFailsToCloseGateAfter3Failures() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		try{
			gate.open();
		}catch (TollboothException e){
			assertTrue(false);			// Should never get here. 
		}
		controller.failNTimes(3,true);
		try{
			gate.close();
		}catch(TollboothException e){
			assertNotNull(e);
		}
	}
	
	@Test
	public void gateControllerFailsToCloseGateWhileItsOpenAndIsInWillNotRespond() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		try{
			gate.open();
		}catch (TollboothException e){
			assertTrue(false);			// Should never get here. 
		}
		
		controller.failNTimes(3,true);
		try{
			gate.close();
		}catch(TollboothException e){
			
		}
		
		try{
			gate.close();
			assertTrue(controller.testIsOpen());
		}catch(TollboothException e){
			assertFalse(true);
		}
		
	}
	
	@Test
	public void gateControllerCorrectStatisticsWhenFailsToCloseGateWhileItsOpenAndIsInWillNotRespond() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		try{
			gate.open();
		}catch (TollboothException e){
			assertTrue(false);			// Should never get here. 
		}
		
		controller.failNTimes(3,true);
		try{
			gate.close();
		}catch(TollboothException e){
			
		}
		
		try{
			gate.close();
			assertEquals(0,gate.getNumberOfCloses());
		}catch(TollboothException e){
			assertFalse(true);
		}
		
	}
	
	@Test
	public void gateControllerHasCorrectMessagesWhenFailsToCloseGateWhileItsOpenAndIsInWillNotRespond() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		try{
			gate.open();
		}catch (TollboothException e){
			assertTrue(false);			// Should never get here. 
		}
		
		controller.failNTimes(3,true);
		try{
			gate.close();
		}catch(TollboothException e){
			
		}
		
		try{
			gate.close();
		}catch(TollboothException e){
			assertFalse(true);
		}
		
		LogMessage message = logger.getNextMessage();
		assertEquals("close: malfunction System Unresponsive", message.getMessage());
		message = logger.getNextMessage();
		assertEquals("close: malfunction System Unresponsive", message.getMessage());
		message = logger.getNextMessage();
		assertEquals("close: unrecoverable malfunction System Unresponsive", message.getMessage());
		message = logger.getNextMessage();
		assertEquals("close: will not respond", message.getMessage());
		
	}
	
	@Test
	public void gateIsOpenAndResponsiveResetIsSentTestGateCloses() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		try{
			gate.open();
		}catch (TollboothException e){
			assertTrue(false);			// Should never get here. 
		}
		
		try{
			gate.reset();
		}catch (TollboothException e){
			assertTrue(false);
		}
		
		assertFalse(gate.isOpen());
	}
	
	@Test
	public void gateIsOpenAndResponsiveResetIsSentTestStatsAreCorrect() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		try{
			gate.open();
		}catch (TollboothException e){
			assertTrue(false);			// Should never get here. 
		}
		
		try{
			gate.reset();
		}catch (TollboothException e){
			assertTrue(false);
		}
		
		assertEquals(0, gate.getNumberOfCloses());
	}
	
	@Test
	public void gateIsOpenAndResponsiveResetIsSentTestLogIsCorrectCorrect() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		try{
			gate.open();
		}catch (TollboothException e){
			assertTrue(false);			// Should never get here. 
		}
		
		try{
			gate.reset();
		}catch (TollboothException e){
			assertTrue(false);
		}
		
		LogMessage message = logger.getNextMessage();
		assertEquals("reset: successful", message.getMessage());
	}
	
	@Test
	public void gateIsClosedAndResponsiveResetIsSentTestGateStaysClosed() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		
		try{
			gate.reset();
		}catch (TollboothException e){
			assertTrue(false);
		}
		
		assertFalse(controller.testIsOpen());
	}
	
	@Test
	public void gateIsClosedAndResponsiveResetIsSentTestStatsAreCorrect() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		
		try{
			gate.reset();
		}catch (TollboothException e){
			assertTrue(false);
		}
		
		assertEquals(0, gate.getNumberOfCloses());
	}
	
	@Test
	public void gateIsClosedAndResponsiveResetIsSentTestLogIsCorrectCorrect() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		
		try{
			gate.reset();
		}catch (TollboothException e){
			assertTrue(false);
		}
		
		LogMessage message = logger.getNextMessage();
		assertEquals("reset: successful", message.getMessage());
	}
	
	@Test
	public void gateIsOpenAndInNotResponseModeAndResetIsSentGateStaysOpen() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		try{
			gate.open();
		}catch (TollboothException e){
			assertTrue(false);			// Should never get here. 
		}
		
		controller.failNTimes(3,true);
		try{
			gate.close();				// Puts it into doesNotRespond
		}catch(TollboothException e){
			
		}
		assertFalse(controller.isResponsive());
		try{
			gate.reset();
		}catch(TollboothException e){
			
		}
		assertTrue(controller.testIsOpen());
	}
	
	@Test
	public void gateIsOpenAndInNotResponseModeAndStatsStayTheSameWhenReceiveReset() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		try{
			gate.open();
		}catch (TollboothException e){
			assertTrue(false);			// Should never get here. 
		}
		
		controller.failNTimes(3,true);
		try{
			gate.close();				// Puts it into doesNotRespond
		}catch(TollboothException e){
			
		}
		assertFalse(controller.isResponsive());
		try{
			gate.reset();
		}catch(TollboothException e){
			
		}
		assertEquals(0, gate.getNumberOfCloses());
	}
	
	
	
	
	@Test
	public void gateIsOpenAndInNotResponseModeAndCorrectMessagesAreLoggedWhenReceiveReset() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		try{
			gate.open();
		}catch (TollboothException e){
			assertTrue(false);			// Should never get here. 
		}
		
		controller.failNTimes(3,true);
		try{
			gate.close();				// Puts it into doesNotRespond
		}catch(TollboothException e){
			
		}
		assertFalse(controller.isResponsive());
		try{
			gate.reset();
		}catch(TollboothException e){
			
		}
		
		LogMessage message = logger.getNextMessage();
		message = logger.getNextMessage();
		message = logger.getNextMessage();	// Get the close messages off the queue
		message = logger.getNextMessage();
		assertEquals("reset: will not respond", message.getMessage());

	}
	
	@Test
	public void gateIsClosedAndInNotResponseModeAndCorrectMessagesAreLoggedWhenReceiveReset() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		
		controller.failNTimes(3,true);
		try{
			gate.open();				// Puts it into doesNotRespond
		}catch(TollboothException e){
			
		}
		assertFalse(controller.isResponsive());
		try{
			gate.reset();
		}catch(TollboothException e){
			
		}
		
		LogMessage message = logger.getNextMessage();
		message = logger.getNextMessage();
		message = logger.getNextMessage();	// Get the close messages off the queue
		message = logger.getNextMessage();
		message = logger.getNextMessage();
		assertEquals("reset: will not respond", message.getMessage());

	}
	
	@Test
	public void gateIsClosedAndInNotResponseModeAndStatsStayCorrectWhenReceiveReset() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		
		controller.failNTimes(3,true);
		try{
			gate.open();				// Puts it into doesNotRespond
		}catch(TollboothException e){
			
		}
		assertFalse(controller.isResponsive());
		try{
			gate.reset();
		}catch(TollboothException e){
			
		}
		
		assertEquals(0, gate.getNumberOfCloses());
		assertEquals(0, gate.getNumberOfOpens());

	}
	
	@Test
	public void gateIsOpenAndInNotResponseModeAndStatsStayCorrectWhenReceiveReset() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		try{
			gate.open();				// Puts it into doesNotRespond
		}catch(TollboothException e){
			
		}
		controller.failNTimes(3,true);
		try{
			gate.close();				// Puts it into doesNotRespond
		}catch(TollboothException e){
			
		}
		assertFalse(controller.isResponsive());
		try{
			gate.reset();
		}catch(TollboothException e){
			
		}
		
		assertEquals(0, gate.getNumberOfCloses());
		assertEquals(1, gate.getNumberOfOpens());

	}
	
	@Test
	public void gateIsOpenAndInResponseModeResetIsSentButFailsAfterThreeTrysTestGateStaysOpen() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		try{
			gate.open();				// Puts it into doesNotRespond
		}catch(TollboothException e){
			
		}
		controller.failNTimes(3,true);
		try{
			gate.reset();
		}catch(TollboothException e){
			
		}
		
		assertTrue(controller.testIsOpen());

	}
	
	@Test
	public void gateIsOpenAndInResponseModeResetIsSentButFailsAfterThreeTrysTestGateMessagesAreLoggedCorrectly() throws TollboothException
	{
		final TestGateController controller = new TestGateController();
		final SimpleLogger logger = new TollgateLogger("TheLogger");
		final TollGate gate = new TollGate(controller, logger);
		try{
			gate.open();				// Puts it into doesNotRespond
		}catch(TollboothException e){
			
		}
		controller.failNTimes(3,true);
		try{
			gate.reset();
		}catch(TollboothException e){
			
		}
		
		LogMessage message = logger.getNextMessage();
		assertEquals("reset: malfunction System Unresponsive", message.getMessage());
		message = logger.getNextMessage();
		assertEquals("reset: malfunction System Unresponsive", message.getMessage());
		message = logger.getNextMessage();
		assertEquals("reset: malfunction System Unresponsive", message.getMessage());
		message = logger.getNextMessage();
		assertEquals("reset: unrecoverable malfunction System Unresponsive", message.getMessage());
	}
	
	
}
